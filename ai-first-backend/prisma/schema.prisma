// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  image     String?
  tenantId  String
  companyId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company     Company?     @relation(fields: [companyId], references: [id])
  products    Product[]
}

model Product {
  id              String        @id @default(uuid())
  tenantId        String        
  name            String
  description     String?
  price           Float
  weight          Float
  height          Float
  width           Float
  length          Float
  unit            String?
  category        String?
  subcategory     String?
  imageUrl        String?
  stock           Int           @default(0)
  active          Boolean       @default(true)
  productType     ProductType
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  userId String
  user   User          @relation(fields: [userId], references: [id])
  items  OrderItem[]
  cartItems CartItem[]
  productsHistory ProductHistory[]
}

model Order {
  id              String      @id @default(uuid())
  status          OrderStatus @default(ABERTO)
  customerId      String
  total           Float
  shippingCost    Float
  shippingMethod  String
  tenantId        String


  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  items  OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  productId String
  orderId   String
  unitPrice Float
  name      String
  imageUrl     String?

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Cart {
  id          String      @id @default(uuid())
  tenantId    String
  customerId  String?
  customerPhone String
  items       CartItem[]
  totalWeight Float?
  totalHeigt  Float?
  totalWidth  Float?
  totalLength Float?
  status      CartStatus @default(ATIVO)
       

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

}

enum CartStatus {
  ATIVO
  FINALIZADO
  ABANDONADO
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  productId String
  cartId    String
  name      String
  unitPrice Float

  product Product @relation(fields: [productId], references: [id])
  cart   Cart   @relation(fields: [cartId], references: [id])
}


model Customer {
  id        String   @id @default(uuid())
  name      String
  cpf       String   @unique
  phone     String
  email     String?
  orders    Order[]
  addresses CustomerAddress[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model CustomerAddress {
  id          String   @id @default(uuid())
  customerId  String
  street      String   
  number      String
  city        String
  state       String
  zipCode     String

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id])
}

model AgentPrompt {
  id               String   @id @default(uuid())
  tenantId         String   @unique
  systemPrompt     String

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  company Company @relation(fields: [tenantId], references: [id])
}

model AgentDocument {
  id               String   @id @default(uuid())
  tenantId         String
  name             String
  fileUrl          String
  content          String

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  company Company @relation(fields: [tenantId], references: [id])
}

enum OrderStatus {
  ABERTO 
  ACEITO
  RECUSADO
  PREPARACAO
  DESLOCAMENTO
  CONCLUIDO
  CANCELADO
  SUSPENSO
}

enum ProductType {
  PRODUTO
  SERVICO
  CURSO
  ASSINATURA
}

model Company {
  id              String   @id @default(uuid())
  corporateName   String
  tradeName       String
  cnpj            String   @unique
  website         String?
  businessSegment String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  contact         CompanyContact?
  address         CompanyAddress?
  users           User[]
  agentPrompts    AgentPrompt[]
  agentDocuments  AgentDocument[]
}

model CompanyContact {
  id                String   @id @default(uuid())
  phone             String
  email             String
  whatsapp          String?
  legalRepresentative  String
  representativeEmail  String

  companyId         String   @unique
  company           Company  @relation(fields: [companyId], references: [id])
}

model CompanyAddress {
  id         String   @id @default(uuid())
  zipCode    String
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  country    String

  companyId  String   @unique
  company    Company  @relation(fields: [companyId], references: [id])
}

model ProductHistory {
  id              String        @id @default(uuid())
  productId       String       
  name            String
  description     String?
  price           Float
  weight          Float
  height          Float
  width           Float
  length          Float
  unit            String?
  category        String?
  subcategory     String?
  imageUrl        String?
  stock           Int           
  active          Boolean       
  productType     ProductType
  tags            String[]
  action          String
  changedBy       String
  createdAt       DateTime      @default(now())

  product         Product       @relation(fields: [productId], references: [id])
}